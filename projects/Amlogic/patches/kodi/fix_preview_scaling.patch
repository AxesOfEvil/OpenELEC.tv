diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
index e78d0d1..47f6594 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
@@ -27,6 +27,7 @@
 #include "cores/VideoRenderers/RenderFlags.h"
 #include "cores/VideoRenderers/RenderManager.h"
 #include "guilib/GraphicContext.h"
+#include "settings/DisplaySettings.h"
 #include "settings/MediaSettings.h"
 #include "settings/Settings.h"
 #include "utils/AMLUtils.h"
@@ -1652,15 +1653,12 @@ bool CAMLCodec::OpenDecoder(CDVDStreamInfo &hints)
   g_renderManager.RegisterRenderUpdateCallBack((const void*)this, RenderUpdateCallBack);
   g_renderManager.RegisterRenderFeaturesCallBack((const void*)this, RenderFeaturesCallBack);
 
-  m_display_rect = g_graphicsContext.GetViewWindow();
-  if (aml_get_device_type() == AML_DEVICE_TYPE_M8)
-  {
-    char mode[256] = {0};
-    aml_get_sysfs_str("/sys/class/display/mode", mode, 255);
-    RESOLUTION_INFO res;
-    if (aml_mode_to_resolution(mode, &res))
-      m_display_rect = CRect(0, 0, res.iScreenWidth, res.iScreenHeight);
-  }
+  m_display_rect = CRect(0, 0, CDisplaySettings::Get().GetCurrentResolutionInfo().iWidth, CDisplaySettings::Get().GetCurrentResolutionInfo().iHeight);
+  char mode[256] = {0};
+  aml_get_sysfs_str("/sys/class/display/mode", mode, 255);
+  RESOLUTION_INFO res;
+  if (aml_mode_to_resolution(mode, &res))
+    m_display_rect = CRect(0, 0, res.iScreenWidth, res.iScreenHeight);
 
 /*
   // if display is set to 1080xxx, then disable deinterlacer for HD content
@@ -2197,17 +2195,19 @@ void CAMLCodec::SetVideoRect(const CRect &SrcRect, const CRect &DestRect)
     return;
   }
 
-  CRect gui, dst_rect;
-  gui = g_graphicsContext.GetViewWindow();
-  // when display is at 1080p, we have freescale enabled
-  // and that scales all layers into 1080p display including video,
-  // so we have to setup video axis for 720p instead of 1080p... Boooo.
+  CRect gui, display, dst_rect;
+  gui = CRect(0, 0, CDisplaySettings::Get().GetCurrentResolutionInfo().iWidth, CDisplaySettings::Get().GetCurrentResolutionInfo().iHeight);
 
+#ifdef TARGET_ANDROID
+  display = m_display_rect;
+#else
+  display = gui;
+#endif
   dst_rect = m_dst_rect;
-  if (gui != m_display_rect)
+  if (gui != display)
   {
-    float xscale = m_display_rect.Width()  / gui.Width();
-    float yscale = m_display_rect.Height() / gui.Height();
+    float xscale = display.Width() / gui.Width();
+    float yscale = display.Height() / gui.Height();
     if (m_stereo_mode == RENDER_STEREO_MODE_SPLIT_VERTICAL)
       xscale /= 2.0;
     else if (m_stereo_mode == RENDER_STEREO_MODE_SPLIT_HORIZONTAL)
@@ -2265,6 +2265,9 @@ void CAMLCodec::SetVideoRect(const CRect &SrcRect, const CRect &DestRect)
   std::string s_dst_rect = StringUtils::Format("%i,%i,%i,%i",
     (int)dst_rect.x1, (int)dst_rect.y1,
     (int)dst_rect.Width(), (int)dst_rect.Height());
+  std::string s_m_dst_rect = StringUtils::Format("%i,%i,%i,%i",
+    (int)m_dst_rect.x1, (int)m_dst_rect.y1,
+    (int)m_dst_rect.Width(), (int)m_dst_rect.Height());
   std::string s_display = StringUtils::Format("%i,%i,%i,%i",
     (int)m_display_rect.x1, (int)m_display_rect.y1,
     (int)m_display_rect.Width(), (int)m_display_rect.Height());
@@ -2273,6 +2276,7 @@ void CAMLCodec::SetVideoRect(const CRect &SrcRect, const CRect &DestRect)
     (int)gui.Width(), (int)gui.Height());
   CLog::Log(LOGDEBUG, "CAMLCodec::SetVideoRect:display(%s)", s_display.c_str());
   CLog::Log(LOGDEBUG, "CAMLCodec::SetVideoRect:gui(%s)", s_gui.c_str());
+  CLog::Log(LOGDEBUG, "CAMLCodec::SetVideoRect:m_dst_rect(%s)", s_m_dst_rect.c_str());
   CLog::Log(LOGDEBUG, "CAMLCodec::SetVideoRect:dst_rect(%s)", s_dst_rect.c_str());
   CLog::Log(LOGDEBUG, "CAMLCodec::SetVideoRect:m_stereo_mode(%d)", m_stereo_mode);
   CLog::Log(LOGDEBUG, "CAMLCodec::SetVideoRect:m_stereo_view(%d)", m_stereo_view);
